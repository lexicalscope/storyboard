group TestDao;

createStoryTable() ::= <<
   create table story (
      id identity primary key, 
      title varchar(100), 
      summary varchar(200), 
      author BIGINT, 
      foreign key (author) references user(id))
>>

createUpvoteTable() ::= <<
   create table upvote (
      story bigint, 
      user bigint, 
      foreign key (user) references user(id), 
      foreign key (story) references story(id), 
      primary key (user, story))
>>

insert() ::= <<
   insert into story 
      (title, summary, author) values (:title, :summary, :authorId)
>>

relevance() ::= <<
   merge into relevance 
      (user, story, score) values (:user, :story, :score)
>>

upvote() ::= <<
   merge into upvote (story, user) values (:story, :user)
>>

createRelevanceTable() ::= <<
   create table relevance (
      user bigint, 
      story bigint, 
      score int, 
      foreign key (user) references user(id), 
      foreign key (story) references story(id), 
      primary key (user, story))
>>

storyFor() ::= <<
   select <_storyColumns()>,score from story
   <_joinRelevance()>
   <_joinAuthorName()>
   <_joinUpvote()>
   group by story.id
>>

story() ::= <<
   select <_storyColumns()>,0 as score from story
   <_joinAuthorName()>
   <_joinUpvote()>
   where story.id=:story
   group by story.id
>>

_storyColumns() ::= << story.id,title,summary,author,authorname, count(upvote.user) as upvotes >>
_relevanceByUser() ::= << (select story,score from relevance where relevance.user=:id) >>
_authorNames() ::= << (select id,name as authorname from user) >>
_joinRelevance() ::= << join <_relevanceByUser()> r on r.story=story.id >>
_joinAuthorName() ::= << join <_authorNames()> u on story.author=u.id >>
_joinUpvote() ::= << left join upvote on story.id=upvote.story >>